{"version":3,"names":[],"mappings":"","sources":["js/vendor/bootstrap/util/template-factory.js"],"sourcesContent":["/**\r\n * --------------------------------------------------------------------------\r\n * Bootstrap (v5.2.0-beta1): util/template-factory.js\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\r\n * --------------------------------------------------------------------------\r\n */\r\n\r\nimport { DefaultAllowlist, sanitizeHtml } from './sanitizer'\r\nimport { getElement, isElement } from '../util/index'\r\nimport SelectorEngine from '../dom/selector-engine'\r\nimport Config from './config'\r\n\r\n/**\r\n * Constants\r\n */\r\n\r\nconst NAME = 'TemplateFactory'\r\n\r\nconst Default = {\r\n  extraClass: '',\r\n  template: '<div></div>',\r\n  content: {}, // { selector : text ,  selector2 : text2 , }\r\n  html: false,\r\n  sanitize: true,\r\n  sanitizeFn: null,\r\n  allowList: DefaultAllowlist\r\n}\r\n\r\nconst DefaultType = {\r\n  extraClass: '(string|function)',\r\n  template: 'string',\r\n  content: 'object',\r\n  html: 'boolean',\r\n  sanitize: 'boolean',\r\n  sanitizeFn: '(null|function)',\r\n  allowList: 'object'\r\n}\r\n\r\nconst DefaultContentType = {\r\n  selector: '(string|element)',\r\n  entry: '(string|element|function|null)'\r\n}\r\n\r\n/**\r\n * Class definition\r\n */\r\n\r\nclass TemplateFactory extends Config {\r\n  constructor(config) {\r\n    super()\r\n    this._config = this._getConfig(config)\r\n  }\r\n\r\n  // Getters\r\n  static get Default() {\r\n    return Default\r\n  }\r\n\r\n  static get DefaultType() {\r\n    return DefaultType\r\n  }\r\n\r\n  static get NAME() {\r\n    return NAME\r\n  }\r\n\r\n  // Public\r\n  getContent() {\r\n    return Object.values(this._config.content)\r\n      .map(config => this._resolvePossibleFunction(config))\r\n      .filter(Boolean)\r\n  }\r\n\r\n  hasContent() {\r\n    return this.getContent().length > 0\r\n  }\r\n\r\n  changeContent(content) {\r\n    this._checkContent(content)\r\n    this._config.content = { ...this._config.content, ...content }\r\n    return this\r\n  }\r\n\r\n  toHtml() {\r\n    const templateWrapper = document.createElement('div')\r\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template)\r\n\r\n    for (const [selector, text] of Object.entries(this._config.content)) {\r\n      this._setContent(templateWrapper, text, selector)\r\n    }\r\n\r\n    const template = templateWrapper.children[0]\r\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass)\r\n\r\n    if (extraClass) {\r\n      template.classList.add(...extraClass.split(' '))\r\n    }\r\n\r\n    return template\r\n  }\r\n\r\n  // Private\r\n  _typeCheckConfig(config) {\r\n    super._typeCheckConfig(config)\r\n    this._checkContent(config.content)\r\n  }\r\n\r\n  _checkContent(arg) {\r\n    for (const [selector, content] of Object.entries(arg)) {\r\n      super._typeCheckConfig({ selector, entry: content }, DefaultContentType)\r\n    }\r\n  }\r\n\r\n  _setContent(template, content, selector) {\r\n    const templateElement = SelectorEngine.findOne(selector, template)\r\n\r\n    if (!templateElement) {\r\n      return\r\n    }\r\n\r\n    content = this._resolvePossibleFunction(content)\r\n\r\n    if (!content) {\r\n      templateElement.remove()\r\n      return\r\n    }\r\n\r\n    if (isElement(content)) {\r\n      this._putElementInTemplate(getElement(content), templateElement)\r\n      return\r\n    }\r\n\r\n    if (this._config.html) {\r\n      templateElement.innerHTML = this._maybeSanitize(content)\r\n      return\r\n    }\r\n\r\n    templateElement.textContent = content\r\n  }\r\n\r\n  _maybeSanitize(arg) {\r\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg\r\n  }\r\n\r\n  _resolvePossibleFunction(arg) {\r\n    return typeof arg === 'function' ? arg(this) : arg\r\n  }\r\n\r\n  _putElementInTemplate(element, templateElement) {\r\n    if (this._config.html) {\r\n      templateElement.innerHTML = ''\r\n      templateElement.append(element)\r\n      return\r\n    }\r\n\r\n    templateElement.textContent = element.textContent\r\n  }\r\n}\r\n\r\nexport default TemplateFactory\r\n"],"file":"theme.bundle.js"}