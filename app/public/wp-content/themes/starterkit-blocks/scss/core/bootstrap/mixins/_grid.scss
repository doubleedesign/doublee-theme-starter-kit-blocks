// Grid system
// Generate semantic grid columns with these mixins.

@mixin make-row() {
	@include make-container();
	display: flex;
	flex-wrap: wrap;
}

@mixin make-col-ready() {
	box-sizing: border-box;
	flex-shrink: 0;
	width: 100%;
	max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
	padding-left: map-get($gutters, 'xs') * 0.5;
	padding-right: map-get($gutters, 'xs') * 0.5;

	@include media-breakpoint-up(sm) {
		padding-left: map-get($gutters, 'sm') * 0.5;
		padding-right: map-get($gutters, 'sm') * 0.5;
	}

	@include media-breakpoint-up(md) {
		padding-left: map-get($gutters, 'md') * 0.5;
		padding-right: map-get($gutters, 'md') * 0.5;
	}

	@include media-breakpoint-up(lg) {
		padding-left: map-get($gutters, 'lg') * 0.5;
		padding-right: map-get($gutters, 'lg') * 0.5;
	}

	@include media-breakpoint-up(xl) {
		padding-left: map-get($gutters, 'xl') * 0.5;
		padding-right: map-get($gutters, 'xl') * 0.5;
	}
}

@mixin make-col($size: false, $columns: $grid-columns) {

	@if $size {
		flex: 0 0 auto;
		width: percentage(divide($size, $columns));

	} @else {
		flex: 1 1 0;
		max-width: 100%;
	}
}

@mixin make-col-auto() {
	flex: 0 0 auto;
	width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: divide($size, $columns);
	margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
// Specify on a parent element(e.g., .row) to force immediate children into NN
// number of columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {

	> * {
		flex: 0 0 auto;
		width: divide(100%, $count);
	}
}

// Framework grid generation
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {

	@for $i from 1 through $columns {
		.col-#{$i} {

			@include make-col($i, $columns);
		}
	}

	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			.col#{$infix} {
				flex: 1 0 0; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
			}

			.row-cols#{$infix}-auto > * {

				@include make-col-auto();
			}

			@if $grid-row-columns > 0 {

				@for $i from 1 through $grid-row-columns {
					.row-cols#{$infix}-#{$i} {

						@include row-cols($i);
					}
				}
			}

			.col#{$infix}-auto {

				@include make-col-auto();
			}

			@if $columns > 0 {

				@for $i from 1 through $columns {
					.col#{$infix}-#{$i} {

						@include make-col($i, $columns);
					}
				}

				// `$columns - 1` because offsetting by the width of an entire row isn't possible
				@for $i from 0 through ($columns - 1) {

					@if not ($infix == '' and $i == 0) { // Avoid emitting useless .offset-0
						.offset#{$infix}-#{$i} {

							@include make-col-offset($i, $columns);
						}
					}
				}
			}
		}
	}
}
